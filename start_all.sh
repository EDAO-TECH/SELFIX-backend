#!/bin/bash

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# üß† SELFIX Smart Startup Script
# Safely boots FastAPI, GPT API, and Healing Daemon
# Prevents duplicates, logs health, and stabilizes state
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

# ‚îÄ‚îÄ CONFIG ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
FASTAPI_PORT=8000
GPT_API_PORT=8825
LOG_DIR="/opt/SELFIX/logs"
DAEMON_LOG="$LOG_DIR/daemon.log"
FASTAPI_LOG="$LOG_DIR/fastapi.log"
GPT_API_LOG="$LOG_DIR/gpt_api.log"
DAEMON_SCRIPT="/opt/SELFIX/scripts/daemon_loop.py"
LOCK_FILE="/tmp/selfix_start.lock"
CPU_THRESHOLD=80
MEM_THRESHOLD=80

mkdir -p "$LOG_DIR"

# ‚îÄ‚îÄ PREVENT DUPLICATE RUN ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
if [ -f "$LOCK_FILE" ]; then
    echo "üö´ Startup already running (lockfile exists). Exiting."
    exit 1
fi
touch "$LOCK_FILE"
trap 'rm -f "$LOCK_FILE"' EXIT

# ‚îÄ‚îÄ RESOURCE CHECK ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

cpu_usage=$(top -bn1 | awk '/%Cpu/ {print 100 - $8}')
mem_usage=$(free | awk '/Mem:/ {printf("%.0f", ($3/$2)*100)}')

echo "üß† CPU: $cpu_usage% | MEM: $mem_usage%"

if (( $(echo "$cpu_usage > $CPU_THRESHOLD" | bc -l) )); then
    echo "‚ùå CPU too high ($cpu_usage%). Aborting startup."
    exit 1
fi

if (( mem_usage > MEM_THRESHOLD )); then
    echo "‚ùå Memory too high ($mem_usage%). Aborting startup."
    exit 1
fi

# ‚îÄ‚îÄ CLEANUP OLD PROCESSES ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
echo "üßº Cleaning up old services..."
for proc in "uvicorn app.main:app" "gpt_api.py" "daemon_loop.py"; do
    pkill -9 -f "$proc" && echo "‚úî Killed: $proc"
done

# ‚îÄ‚îÄ START FASTAPI ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
echo "üöÄ Starting FastAPI (port $FASTAPI_PORT)..."
cd /opt/SELFIX
nohup /opt/SELFIX/venv/bin/uvicorn app.main:app \
    --host 0.0.0.0 --port $FASTAPI_PORT --workers 1 \
    >> "$FASTAPI_LOG" 2>&1 &

# ‚îÄ‚îÄ START GPT API ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
echo "ü§ñ Starting GPT Flask API (port $GPT_API_PORT)..."
cd /opt/SELFIX/app
nohup /opt/SELFIX/venv/bin/python3 api/gpt_api.py \
    >> "$GPT_API_LOG" 2>&1 &

# ‚îÄ‚îÄ STABILIZE ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
echo "‚è≥ Waiting for services to stabilize..."
sleep 10

# ‚îÄ‚îÄ HEALTH CHECK ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
fastapi_status=$(curl -s -o /dev/null -w "%{http_code}" http://127.0.0.1:$FASTAPI_PORT/health)
gpt_status=$(curl -s -o /dev/null -w "%{http_code}" http://127.0.0.1:$GPT_API_PORT/api/karma-score -H "Stripe-Token: test" || echo "000")

echo "üì° FastAPI: HTTP $fastapi_status"
echo "üì° GPT API: HTTP $gpt_status"

# ‚îÄ‚îÄ START HEALING DAEMON IF NEEDED ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
if pgrep -f "daemon_loop.py" > /dev/null; then
    echo "üß¨ Healing Daemon already running."
else
    echo "üß¨ Starting Healing Daemon..."
    nohup /opt/SELFIX/venv/bin/python3 "$DAEMON_SCRIPT" \
        >> "$DAEMON_LOG" 2>&1 &
fi

# ‚îÄ‚îÄ DONE ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
echo "‚úÖ All SELFIX services launched successfully."
echo "üìÅ Logs: $LOG_DIR"

# ‚îÄ‚îÄ LAUNCH REALTIME CLI MONITOR ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
GLANCE_CLI="/opt/SELFIX/glance/glance_cli.py"

if [ -f "$GLANCE_CLI" ]; then
    echo "üìä Starting Realtime CLI Monitor..."
    if [ -t 1 ]; then
        # Running in terminal
        /opt/SELFIX/venv/bin/python3 "$GLANCE_CLI"
    else
        # Headless or service call
        nohup /opt/SELFIX/venv/bin/python3 "$GLANCE_CLI" \
            >> "$LOG_DIR/glance_cli.out" 2>&1 &
    fi
else
    echo "‚ö†Ô∏è Glance CLI not found at $GLANCE_CLI"
fi
